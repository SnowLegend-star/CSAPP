第 9 章 虚拟存储器

虚拟存储器是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互，它为每个
进程提供了一个大的、一致的和私有的地址空间。

通过一个很清晰的机制，虚拟存储器提供了三个重要的能力：

    o 它将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，
      并根据需要在磁盘和主存之间来回传送数据，通过这种方式，它高效地使用了主存

    o 它为每个进程提供了一致的地址空间，从而简化了存储器管理

    o 它保护了每个进程的地址空间不被其他进程破坏
        p534

程序员需要学习虚拟存储器的原因：

    o 虚拟存储器是中心的。虚拟存储器遍及计算机系统的所有层面，在硬件异常、汇编器、
      链接器、加载器、共享对象、文件和进程的设计中扮演着重要角色。理解虚拟存储器
      将帮助你更好地理解系统通常是如何工作的。

    o 虚拟存储器是强大的。虚拟存储器给予应用程序强大的能力，可以创建和销毁存储器
      片（chunk）、将存储器片映射到磁盘文件的某个部分，以及与其他进程共享存储器。
      理解虚拟存储器将帮助你利用它的强大功能在你的应用程序中添加动力。

    o 虚拟存储器是危险的。每次应用程序引用一个变量、间接引用一个指针，或者调用一
      个诸如 malloc 这样的动态分配程序时，它就会和虚拟存储器发生交互。如果虚拟存
      储器使用不当，应用将遇到复杂危险的与存储器有关的错误。理解虚拟存储器以及诸
      如malloc 之类的管理虚拟存储器的分配程序，可以帮助你避免这些错误。
        p534

使用虚拟寻址（virtual addressing）时，CPU 通过生成一个虚拟地址（Virtual Address,
VA）来访问主存，这个虚拟地址在被送到存储器之前先转换成适当的物理地址。将一个虚拟
地址转换为物理地址的任务叫做地址翻译（address translation）。就像异常处理一样，
地址翻译需要 CPU 硬件和操作系统之间的紧密合作。

CPU 芯片上叫做存储器管理单元（Memory Management Unit, MMU）的专用硬件，利用存放
在主存中的查询表来动态翻译虚拟地址，该表的内容是操作系统管理的。
        p535

地址空间的概念是很重要的，因为它清楚地区分了数据对象（字节）和它们的属性（地址）。
一旦认识到这种区别，那么我们就可以将其推广，允许每个数据对象有多个独立的地址，其
中每个地址都选自一个不同的地址空间。这就是虚拟存储器的基本思想。主存中的每个字节
都有一个选自虚拟地址空间的虚拟地址和一个选自物理地址空间的物理地址。
        p536

概念上而言，虚拟存储器（VM）被组织为一个由存放在磁盘上的 N 个连续的字节大小的单
元组成的数组。

在任意时刻，虚拟页面的集合都分为三个不相交的子集：

    o 未分配的： VM 系统还未分配（或者创建）的页。未分配的块没有任何数据和它们相
      关联，因此也就不占用任何磁盘空间。

    o 缓存的：当前缓存在物理存储器中的已分配页。

    o 未缓存的：没有缓存在物理存储器中的已分配页。
        p536

实际上，操作系统为每个进程提供了一个独立的页表，因而也就是一个独立的虚拟地址空间。
        p540

注意，多个虚拟页面可以映射到同一个共享物理页面上。
        p540

按需页面调度和独立的虚拟地址空间的结合，对系统中存储器的使用和管理造成了深远的影
响。特别地，VM 简化了链接和加载、代码和数据共享，以及应用程序的存储器分配。
        p540

将一组连续的虚拟页映射到任意一个文件中的任意位置的表示法称做存储器映射（memory
mapping）。UNIX 提供一个称为 mmap 的系统调用，允许应用程序自己做存储器映射。
        541

操作系统通过将不同进程中适当的虚拟页面映射到相同的物理页面，从而安排多个进程共享
这部分代码的一个拷贝，而不是在每个进程中都包括单独的内核和 C 标准库的拷贝。
        p541

地址翻译机制可以以一种自然地方式扩展到提供更好的访问控制。因为每次 CPU 生成一个
地址时，地址翻译硬件都会读一个页表条目（Page Table Entry,PTE），所以通过在 PTE
上添加一些额外的许可位来控制对一个虚拟页面内容的访问十分简单。
        p541
